name: Build

on: [push]

env:
  TOOLCHAIN: clang
  INSTALLER: yes

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        model: [ "G973F" ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y -qq libtinfo5 ccache


      - name: Disable compression in ccache and set ccache path
        run: ccache -o compression=false -o cache_dir=$HOME/.ccache

      - name: Prepare ccache timestamp
        id: ccache_timestamp
        run: |
          echo "::set-output name=FULL_DATE::$(date +'%Y-%m-%d')"
          echo "::set-output name=MONTH_DATE::$(date +'%Y-%m')"

      - name: Create cache key from ${{ matrix.model }}
        id: ccache_model_key
        run: echo "::set-output name=KEY::$( echo ${{ matrix.model }} | tr ',' '_' )"

      - name: Cache ccache files
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-${{ env.TOOLCHAIN }}-${{ steps.ccache_model_key.outputs.KEY }}-${{ steps.ccache_timestamp.outputs.FULL_DATE }}
          restore-keys: |
            ccache-${{ env.TOOLCHAIN }}-${{ steps.ccache_model_key.outputs.KEY }}-${{ steps.ccache_timestamp.outputs.MONTH_DATE }}
            ccache-${{ env.TOOLCHAIN }}-${{ steps.ccache_model_key.outputs.KEY }}-
            ccache-${{ env.TOOLCHAIN }}-

      - name: Kernel Configure
        run: |
         make ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- O=build exynos9820-beyond1lte_defconfig
      - name: Install gcc-aarch64-linux-gnu exynos9820-beyond1lte_defconfig
        if: env.TOOLCHAIN == 'system-gcc' || env.TOOLCHAIN == 'system-clang'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y -qq gcc-aarch64-linux-gnu
      - name: Install clang
        if: env.TOOLCHAIN == 'system-clang'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y -qq llvm lld clang
     
name: Build

on: [push]

env:
  TOOLCHAIN: clang
  INSTALLER: yes

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        model: [ "G973F" ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y -qq libtinfo5 ccache


      - name: Disable compression in ccache and set ccache path
        run: ccache -o compression=false -o cache_dir=$HOME/.ccache

      - name: Prepare ccache timestamp
        id: ccache_timestamp
        run: |
          echo "::set-output name=FULL_DATE::$(date +'%Y-%m-%d')"
          echo "::set-output name=MONTH_DATE::$(date +'%Y-%m')"

      - name: Create cache key from ${{ matrix.model }}
        id: ccache_model_key
        run: echo "::set-output name=KEY::$( echo ${{ matrix.model }} | tr ',' '_' )"

      - name: Cache ccache files
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ccache-${{ env.TOOLCHAIN }}-${{ steps.ccache_model_key.outputs.KEY }}-${{ steps.ccache_timestamp.outputs.FULL_DATE }}
          restore-keys: |
            ccache-${{ env.TOOLCHAIN }}-${{ steps.ccache_model_key.outputs.KEY }}-${{ steps.ccache_timestamp.outputs.MONTH_DATE }}
            ccache-${{ env.TOOLCHAIN }}-${{ steps.ccache_model_key.outputs.KEY }}-
            ccache-${{ env.TOOLCHAIN }}-

      - name: Kernel Configure
        run: |
         make ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- O=build exynos9820-beyond1lte_defconfig
      - name: Install gcc-aarch64-linux-gnu exynos9820-beyond1lte_defconfig
        if: env.TOOLCHAIN == 'system-gcc' || env.TOOLCHAIN == 'system-clang'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y -qq gcc-aarch64-linux-gnu
      - name: Install clang
        if: env.TOOLCHAIN == 'system-clang'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: sudo apt-get install -y -qq llvm lld clang
     

       - name: Kernel Build
        run: make ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- O=build
 
